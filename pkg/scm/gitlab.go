package scm

import (
	"context"
	pkgctx "github.com/chengjingtao/gomod-version-lint/pkg/context"

	gogitlab "github.com/xanzy/go-gitlab"
	"strings"
)

type gitlabClient struct {
	*gogitlab.Client
}

func NewGitlabClient(ctx context.Context, token string, baseUrl string) (*gitlabClient, error) {
	client, err := gogitlab.NewClient(token, gogitlab.WithBaseURL(baseUrl))
	if err != nil {
		return nil, err
	}

	return &gitlabClient{
		Client: client,
	}, nil
}

func (gitlab *gitlabClient) RefreshReviewComments(ctx context.Context, repoPath string, prId int, opts RefreshReviewCommentOptions) error {

	logger := pkgctx.GetLogger(ctx).With("prID", prId)

	mr, _, err := gitlab.MergeRequests.GetMergeRequest(repoPath, prId, nil)
	if err != nil {
		logger.Errorw("get merge request error", "prId", prId, "err", err.Error())
		return err
	}

	allDiscussions, _, err := gitlab.Discussions.ListMergeRequestDiscussions(repoPath, prId, &gogitlab.ListMergeRequestDiscussionsOptions{
		PerPage: 200,
	})
	if err != nil {
		return err
	}

	// add comment again
	for _, item := range opts.Comments {
		logger.Debugf("creating comment")
		body := item.FmtComment(opts.CommentBy)
		comment, _, err := gitlab.Discussions.CreateMergeRequestDiscussion(repoPath, prId, &gogitlab.CreateMergeRequestDiscussionOptions{
			Body:     &body,
			CommitID: &opts.CommitID,
			Position: &gogitlab.NotePosition{
				BaseSHA:      mr.DiffRefs.BaseSha,
				StartSHA:     mr.DiffRefs.StartSha,
				HeadSHA:      mr.DiffRefs.HeadSha,
				PositionType: "text",
				NewPath:      item.Path,
				NewLine:      item.Line,
			},
		})
		if err != nil {
			logger.Errorw("create comment error", "body", item.Body, "id", comment.ID, "err", err.Error())
		} else {
			logger.Infow("create comment", "body", item.Body, "id", comment.ID)
		}
	}

	// Delete all comment generated by current
	discussionShouldBeDeleted := []gogitlab.Discussion{}
	for _, item := range allDiscussions {
		_item := *item
		if len(_item.Notes) == 0 {
			continue
		}

		if strings.HasPrefix(item.Notes[0].Body, opts.FmtCommentBy()) {
			discussionShouldBeDeleted = append(discussionShouldBeDeleted, _item)
		}
	}
	for _, item := range discussionShouldBeDeleted {
		logger.Debugw("deleting old comment", "id", item.ID, "noteid", item.Notes[0].ID)
		_, err = gitlab.Discussions.DeleteMergeRequestDiscussionNote(repoPath, prId, item.ID, item.Notes[0].ID)
		if err != nil {
			logger.Errorw("deleted old comment error", "err", err, "id", item.ID, "noteid", item.Notes[0].ID)
		} else {
			logger.Infow("deleted old comment", "id", item.ID, "noteid", item.Notes[0].ID)
		}
	}

	return nil
}
